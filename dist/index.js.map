{"version":3,"sources":["../src/index.ts","../src/constants.ts","../src/fixtures.ts","../src/types.ts","../src/services.ts"],"sourcesContent":["export * from './constants';\nexport * from './fixtures';\nexport * from './services';\nexport * from './types';\n","import { constants } from 'starknet';\n\nexport const STAGING_BASE_URL = 'https://goerli.api.avnu.fi';\nexport const BASE_URL = 'https://starknet.api.avnu.fi';\nexport const AVNU_ADDRESS: { [chainId: string]: string } = {\n  [constants.StarknetChainId.SN_MAIN]: '0x4270219d365d6b017231b52e92b3fb5d7c8378b05e9abc97724537a80e93b0f',\n  [`${constants.StarknetChainId.SN_MAIN}-dev`]: '0x33c21d4cd5db846109448b3e827d175e50b6d449387f76ca7f91a881edca44b',\n  [constants.StarknetChainId.SN_GOERLI]: '0x7e36202ace0ab52bf438bd8a8b64b3731c48d09f0d8879f5b006384c2f35032',\n  [`${constants.StarknetChainId.SN_GOERLI}-dev`]: '0x6d8cd321dcbbf54512eab67c8a6849faf920077a3996f40bb4761adc4f021d2',\n};\n","import { parseUnits } from 'ethers';\nimport { constants } from 'starknet';\nimport {\n  BuildSwapTransaction,\n  InvokeSwapResponse,\n  Page,\n  Pair,\n  Price,\n  PriceRequest,\n  Quote,\n  QuoteRequest,\n  Source,\n  SourceType,\n  Token,\n} from './types';\n\nexport const aPriceRequest = (): PriceRequest => ({\n  sellTokenAddress: '0x49d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7',\n  sellAmount: parseUnits('1', 18),\n  buyTokenAddress: '0x72df4dc5b6c4df72e4288857317caf2ce9da166ab8719ab8306516a2fddfff7',\n});\n\nexport const aQuoteRequest = (): QuoteRequest => ({\n  sellTokenAddress: '0x49d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7',\n  sellAmount: parseUnits('1', 18),\n  buyTokenAddress: '0x72df4dc5b6c4df72e4288857317caf2ce9da166ab8719ab8306516a2fddfff7',\n  size: 1,\n  takerAddress: '0x0',\n});\n\nexport const aPrice = (): Price => ({\n  sellTokenAddress: '0x49d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7',\n  sellAmount: parseUnits('1', 18),\n  sellAmountInUsd: 1700,\n  buyTokenAddress: '0x72df4dc5b6c4df72e4288857317caf2ce9da166ab8719ab8306516a2fddfff7',\n  buyAmount: parseUnits('2', 18),\n  buyAmountInUsd: 1700,\n  blockNumber: 1,\n  chainId: constants.StarknetChainId.SN_GOERLI,\n  sourceName: 'AMM1',\n  priceRatioUsd: 0,\n  gasFees: BigInt(0),\n  gasFeesInUsd: 0,\n});\n\nexport const aQuote = (): Quote => ({\n  quoteId: 'quoteId',\n  sellTokenAddress: '0x49d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7',\n  sellAmount: parseUnits('1', 18),\n  sellAmountInUsd: 1700,\n  buyTokenAddress: '0x72df4dc5b6c4df72e4288857317caf2ce9da166ab8719ab8306516a2fddfff7',\n  buyAmount: parseUnits('2', 18),\n  buyAmountInUsd: 1700,\n  buyAmountWithoutFees: parseUnits('2', 18),\n  buyAmountWithoutFeesInUsd: 1700,\n  blockNumber: 1,\n  chainId: constants.StarknetChainId.SN_GOERLI,\n  expiry: 100000000000,\n  routes: [\n    {\n      name: 'AMM1',\n      address: '0x975910cd99bc56bd289eaaa5cee6cd557f0ddafdb2ce6ebea15b158eb2c661',\n      percent: 1,\n      sellTokenAddress: '0x49d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7',\n      buyTokenAddress: '0x72df4dc5b6c4df72e4288857317caf2ce9da166ab8719ab8306516a2fddfff7',\n      routes: [],\n    },\n  ],\n  gasFees: BigInt('0x0'),\n  gasFeesInUsd: 0,\n  avnuFees: BigInt('0x0'),\n  avnuFeesInUsd: 0,\n  avnuFeesBps: BigInt('0x0'),\n  integratorFees: BigInt('0x0'),\n  integratorFeesInUsd: 0,\n  integratorFeesBps: BigInt('0x0'),\n  priceRatioUsd: 0,\n  liquiditySource: 'DEX_AGGREGATOR',\n  suggestedSolution: undefined,\n});\n\nexport const aQuoteWithManySubRoutes = (): Quote => ({\n  quoteId: 'quoteId',\n  sellTokenAddress: '0x49d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7',\n  sellAmount: parseUnits('1', 18),\n  sellAmountInUsd: 1700,\n  buyTokenAddress: '0x72df4dc5b6c4df72e4288857317caf2ce9da166ab8719ab8306516a2fddfff7',\n  buyAmount: parseUnits('2', 18),\n  buyAmountInUsd: 1700,\n  buyAmountWithoutFees: parseUnits('2', 18),\n  buyAmountWithoutFeesInUsd: 1700,\n  blockNumber: 1,\n  chainId: constants.StarknetChainId.SN_GOERLI,\n  expiry: 100000000000,\n  priceRatioUsd: 0,\n  liquiditySource: 'DEX_AGGREGATOR',\n  routes: [\n    {\n      name: 'AMM1',\n      address: '0x975910cd99bc56bd289eaaa5cee6cd557f0ddafdb2ce6ebea15b158eb2c661',\n      percent: 1,\n      sellTokenAddress: '0x49d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7',\n      buyTokenAddress: '0x3e85bfbb8e2a42b7bead9e88e9a1b19dbccf661471061807292120462396ec9',\n      routes: [\n        {\n          name: 'AMM2',\n          address: '0x975910cd99bc56bd289eaaa5cee6cd557f0ddafdb2ce6ebea15b158eb2c662',\n          percent: 1,\n          sellTokenAddress: '0x3e85bfbb8e2a42b7bead9e88e9a1b19dbccf661471061807292120462396ec9',\n          buyTokenAddress: '0x2e2faab2cad8ecdde5e991798673ddcc08983b872304a66e5f99fbb24e14abc',\n          routes: [\n            {\n              name: 'AMM1',\n              address: '0x975910cd99bc56bd289eaaa5cee6cd557f0ddafdb2ce6ebea15b158eb2c661',\n              percent: 1,\n              sellTokenAddress: '0x2e2faab2cad8ecdde5e991798673ddcc08983b872304a66e5f99fbb24e14abc',\n              buyTokenAddress: '0x72df4dc5b6c4df72e4288857317caf2ce9da166ab8719ab8306516a2fddfff7',\n              routes: [],\n            },\n          ],\n        },\n      ],\n    },\n  ],\n  gasFees: BigInt('0x0'),\n  gasFeesInUsd: 0,\n  avnuFees: BigInt('0x0'),\n  avnuFeesInUsd: 0,\n  avnuFeesBps: BigInt('0x0'),\n  integratorFees: BigInt('0x0'),\n  integratorFeesInUsd: 0,\n  integratorFeesBps: BigInt('0x0'),\n  suggestedSolution: undefined,\n});\n\nexport const aQuoteWithManyComplexRoutes = (): Quote => ({\n  quoteId: 'quoteId',\n  sellTokenAddress: '0x49d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7',\n  sellAmount: parseUnits('1', 18),\n  sellAmountInUsd: 1700,\n  buyTokenAddress: '0x72df4dc5b6c4df72e4288857317caf2ce9da166ab8719ab8306516a2fddfff7',\n  buyAmount: parseUnits('2', 18),\n  buyAmountInUsd: 1700,\n  buyAmountWithoutFees: parseUnits('2', 18),\n  buyAmountWithoutFeesInUsd: 1700,\n  blockNumber: 1,\n  chainId: constants.StarknetChainId.SN_GOERLI,\n  expiry: 100000000000,\n  gasFees: BigInt('0x0'),\n  gasFeesInUsd: 0,\n  avnuFees: BigInt('0x0'),\n  avnuFeesInUsd: 0,\n  avnuFeesBps: BigInt('0x0'),\n  integratorFees: BigInt('0x0'),\n  integratorFeesInUsd: 0,\n  integratorFeesBps: BigInt('0x0'),\n  priceRatioUsd: 0,\n  liquiditySource: 'DEX_AGGREGATOR',\n  routes: [\n    {\n      name: 'AMM1',\n      address: '0x975910cd99bc56bd289eaaa5cee6cd557f0ddafdb2ce6ebea15b158eb2c661',\n      percent: 0.5,\n      sellTokenAddress: '0x49d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7',\n      buyTokenAddress: '0x3e85bfbb8e2a42b7bead9e88e9a1b19dbccf661471061807292120462396ec9',\n      routes: [\n        {\n          name: 'AMM2',\n          address: '0x975910cd99bc56bd289eaaa5cee6cd557f0ddafdb2ce6ebea15b158eb2c662',\n          percent: 0.5,\n          sellTokenAddress: '0x3e85bfbb8e2a42b7bead9e88e9a1b19dbccf661471061807292120462396ec9',\n          buyTokenAddress: '0x2e2faab2cad8ecdde5e991798673ddcc08983b872304a66e5f99fbb24e14abc',\n          routes: [\n            {\n              name: 'AMM1',\n              address: '0x975910cd99bc56bd289eaaa5cee6cd557f0ddafdb2ce6ebea15b158eb2c661',\n              percent: 1,\n              sellTokenAddress: '0x2e2faab2cad8ecdde5e991798673ddcc08983b872304a66e5f99fbb24e14abc',\n              buyTokenAddress: '0x72df4dc5b6c4df72e4288857317caf2ce9da166ab8719ab8306516a2fddfff7',\n              routes: [],\n            },\n          ],\n        },\n        {\n          name: 'AMM1',\n          address: '0x975910cd99bc56bd289eaaa5cee6cd557f0ddafdb2ce6ebea15b158eb2c661',\n          percent: 0.5,\n          sellTokenAddress: '0x3e85bfbb8e2a42b7bead9e88e9a1b19dbccf661471061807292120462396ec9',\n          buyTokenAddress: '0x72df4dc5b6c4df72e4288857317caf2ce9da166ab8719ab8306516a2fddfff7',\n          routes: [],\n        },\n      ],\n    },\n    {\n      name: 'AMM1',\n      address: '0x975910cd99bc56bd289eaaa5cee6cd557f0ddafdb2ce6ebea15b158eb2c661',\n      percent: 0.2,\n      sellTokenAddress: '0x49d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7',\n      buyTokenAddress: '0x72df4dc5b6c4df72e4288857317caf2ce9da166ab8719ab8306516a2fddfff7',\n      routes: [],\n    },\n    {\n      name: 'AMM1',\n      address: '0x975910cd99bc56bd289eaaa5cee6cd557f0ddafdb2ce6ebea15b158eb2c661',\n      percent: 0.3,\n      sellTokenAddress: '0x49d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7',\n      buyTokenAddress: '0x3e85bfbb8e2a42b7bead9e88e9a1b19dbccf661471061807292120462396ec9',\n      routes: [\n        {\n          name: 'AMM2',\n          address: '0x975910cd99bc56bd289eaaa5cee6cd557f0ddafdb2ce6ebea15b158eb2c662',\n          percent: 0.2,\n          sellTokenAddress: '0x3e85bfbb8e2a42b7bead9e88e9a1b19dbccf661471061807292120462396ec9',\n          buyTokenAddress: '0x72df4dc5b6c4df72e4288857317caf2ce9da166ab8719ab8306516a2fddfff7',\n          routes: [],\n        },\n        {\n          name: 'AMM1',\n          address: '0x975910cd99bc56bd289eaaa5cee6cd557f0ddafdb2ce6ebea15b158eb2c661',\n          percent: 0.8,\n          sellTokenAddress: '0x3e85bfbb8e2a42b7bead9e88e9a1b19dbccf661471061807292120462396ec9',\n          buyTokenAddress: '0x72df4dc5b6c4df72e4288857317caf2ce9da166ab8719ab8306516a2fddfff7',\n          routes: [],\n        },\n      ],\n    },\n  ],\n  suggestedSolution: undefined,\n});\n\nexport const anInvokeSwapResponse = (): InvokeSwapResponse => ({\n  transactionHash: '0x0',\n});\n\nexport const aBuildSwapTransaction = (): BuildSwapTransaction => ({\n  chainId: constants.StarknetChainId.SN_GOERLI,\n  contractAddress: '0x0',\n  entrypoint: 'execute',\n  calldata: [],\n});\n\nexport const ethToken = (): Token => ({\n  name: 'Ethereum',\n  address: '0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7',\n  symbol: 'ETH',\n  decimals: 18,\n  chainId: '0x534e5f474f45524c49',\n  logoUri:\n    'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png',\n});\n\nexport const btcToken = (): Token => ({\n  name: 'Wrapped Bitcoin',\n  address: '0x72df4dc5b6c4df72e4288857317caf2ce9da166ab8719ab8306516a2fddfff7',\n  symbol: 'WBTC',\n  decimals: 18,\n  chainId: '0x534e5f474f45524c49',\n  logoUri:\n    'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599/logo.png',\n});\n\nexport const aPair = (): Pair => ({\n  token1: ethToken(),\n  token2: btcToken(),\n});\n\nexport const aPage = <T>(content: T[], size = 10, number = 0, totalPages = 1, totalElements = 1): Page<T> => ({\n  content,\n  size,\n  totalPages,\n  number,\n  totalElements,\n});\n\nexport const aSource = (): Source => ({\n  name: 'AMM1',\n  address: '0x975910cd99bc56bd289eaaa5cee6cd557f0ddafdb2ce6ebea15b158eb2c661',\n  icon: 'https://pbs.twimg.com/profile_images/1567441002063069184/SGtDtW-C_400x400.jpg',\n  type: SourceType.DEX,\n});\n","import { Call, Signature } from 'starknet';\n\nexport interface Pageable {\n  page?: number;\n  size?: number;\n  sort?: string;\n}\n\nexport type GetTokensRequest = Pageable;\n\nexport interface GetPairsRequest extends Pageable {\n  token?: string;\n}\n\nexport interface Page<T> {\n  content: T[];\n  totalPages: number;\n  totalElements: number;\n  size: number;\n  number: number;\n}\n\nexport interface Token {\n  name: string;\n  address: string;\n  symbol: string;\n  decimals: number;\n  chainId: string;\n  logoUri: string;\n}\n\nexport interface Pair {\n  token1: Token;\n  token2: Token;\n}\n\nexport interface PriceRequest {\n  sellTokenAddress: string;\n  buyTokenAddress: string;\n  sellAmount: bigint;\n}\n\nexport interface QuoteRequest {\n  sellTokenAddress: string;\n  buyTokenAddress: string;\n  sellAmount: bigint;\n  takerAddress?: string;\n  size?: number;\n  excludeSources?: string[];\n  integratorFees?: bigint;\n  integratorFeeRecipient?: string;\n  integratorName?: string;\n  mode?: 'CLASSIC' | 'TURBO';\n}\n\nexport interface Route {\n  name: string;\n  address: string;\n  percent: number;\n  sellTokenAddress: string;\n  buyTokenAddress: string;\n  routeInfo?: Map<string, string>;\n  routes: Route[];\n}\n\nexport interface Price {\n  sellTokenAddress: string;\n  sellAmount: bigint;\n  sellAmountInUsd: number;\n  buyTokenAddress: string;\n  buyAmount: bigint;\n  buyAmountInUsd: number;\n  blockNumber?: number;\n  chainId: string;\n  sourceName: string;\n  priceRatioUsd: number;\n  gasFees: bigint;\n  gasFeesInUsd: number;\n}\n\nexport interface Quote {\n  quoteId: string;\n  sellTokenAddress: string;\n  sellAmount: bigint;\n  sellAmountInUsd: number;\n  buyTokenAddress: string;\n  buyAmount: bigint;\n  buyAmountInUsd: number;\n  buyAmountWithoutFees: bigint;\n  buyAmountWithoutFeesInUsd: number;\n  blockNumber?: number;\n  chainId: string;\n  expiry?: number;\n  routes: Route[];\n  gasFees: bigint;\n  gasFeesInUsd: number;\n  avnuFees: bigint;\n  avnuFeesInUsd: number;\n  avnuFeesBps: bigint;\n  integratorFees: bigint;\n  integratorFeesInUsd: number;\n  integratorFeesBps: bigint;\n  priceRatioUsd: number;\n  sellTokenPriceInUsd?: number;\n  buyTokenPriceInUsd?: number;\n  liquiditySource: 'DEX_AGGREGATOR' | 'MARKET_MAKER' | 'SOLVER';\n  suggestedSolution?: SuggestedSolution;\n}\n\nexport interface SuggestedSolution {\n  sellAmount: bigint;\n  sellAmountInUsd?: number;\n  buyAmount: bigint;\n  buyAmountInUsd?: number;\n}\n\nexport interface InvokeSwapResponse {\n  transactionHash: string;\n}\n\nexport interface RequestError {\n  messages: string[];\n}\n\nexport interface AvnuOptions {\n  baseUrl?: string;\n  dev?: boolean;\n  abortSignal?: AbortSignal;\n  avnuPublicKey?: string;\n}\n\nexport interface ExecuteSwapOptions {\n  executeApprove?: boolean;\n  gasless?: boolean;\n  takerSignature?: Signature;\n  slippage?: number;\n}\n\nexport interface BuildSwapTransaction extends Call {\n  chainId: string;\n}\n\nexport enum SourceType {\n  DEX = 'DEX',\n  MARKET_MAKER = 'MARKET_MAKER',\n  SOLVER = 'SOLVER',\n}\n\nexport interface Source {\n  name: string;\n  address: string;\n  icon?: string;\n  type: SourceType;\n}\n","import { toBeHex } from 'ethers';\nimport qs from 'qs';\nimport { AccountInterface, Call, ec, hash, Signature, typedData, uint256 } from 'starknet';\nimport { AVNU_ADDRESS, BASE_URL, STAGING_BASE_URL } from './constants';\nimport {\n  AvnuOptions,\n  BuildSwapTransaction,\n  ExecuteSwapOptions,\n  GetTokensRequest,\n  InvokeSwapResponse,\n  Page,\n  Price,\n  PriceRequest,\n  Quote,\n  QuoteRequest,\n  RequestError,\n  Source,\n  Token,\n} from './types';\n\nconst getBaseUrl = (): string => (process.env.NODE_ENV === 'dev' ? STAGING_BASE_URL : BASE_URL);\n\nconst parseResponse = <T>(response: Response, avnuPublicKey?: string): Promise<T> => {\n  if (response.status === 400) {\n    return response.json().then((error: RequestError) => {\n      throw new Error(error.messages[0]);\n    });\n  }\n  if (response.status > 400) {\n    throw new Error(`${response.status} ${response.statusText}`);\n  }\n  if (avnuPublicKey) {\n    const signature = response.headers.get('signature');\n    if (!signature) throw new Error('No server signature');\n    return response\n      .clone()\n      .text()\n      .then((textResponse) => {\n        const hashResponse = hash.computeHashOnElements([hash.starknetKeccak(textResponse)]);\n        const formattedSig = signature.split(',').map((s) => BigInt(s));\n        const signatureType = new ec.starkCurve.Signature(formattedSig[0], formattedSig[1]);\n        if (!ec.starkCurve.verify(signatureType, hashResponse, avnuPublicKey))\n          throw new Error('Invalid server signature');\n      })\n      .then(() => response.json());\n  }\n  return response.json();\n};\n\n/**\n * Fetches the prices of DEX applications.\n * It allows to find the prices of AMM without any path optimization. It allows to measure the performance of the results from the getQuotes endpoints. The prices are sorted (best first).\n *\n * @param request: The request params for the avnu API `/swap/v1/prices` endpoint.\n * @param options: Optional options.\n * @returns The best quotes\n */\nconst fetchPrices = (request: PriceRequest, options?: AvnuOptions): Promise<Price[]> => {\n  const queryParams = qs.stringify({ ...request, sellAmount: toBeHex(request.sellAmount) }, { arrayFormat: 'repeat' });\n  return fetch(`${options?.baseUrl ?? getBaseUrl()}/swap/v1/prices?${queryParams}`, {\n    signal: options?.abortSignal,\n    headers: { ...(options?.avnuPublicKey !== undefined && { 'ask-signature': 'true' }) },\n  })\n    .then((response) => parseResponse<Price[]>(response, options?.avnuPublicKey))\n    .then((prices) =>\n      prices.map((price) => ({\n        ...price,\n        sellAmount: BigInt(price.sellAmount),\n        buyAmount: BigInt(price.buyAmount),\n        gasFees: BigInt(price.gasFees),\n      })),\n    );\n};\n\n/**\n * Fetches the best quotes.\n * It allows to find the best quotes from on-chain and off-chain liquidity. The best quotes will be returned and are sorted (best first).\n *\n * @param request: The request params for the avnu API `/swap/v1/quotes` endpoint.\n * @param options: Optional options.\n * @returns The best quotes\n */\nconst fetchQuotes = (request: QuoteRequest, options?: AvnuOptions): Promise<Quote[]> => {\n  const queryParams = qs.stringify(\n    {\n      ...request,\n      sellAmount: toBeHex(request.sellAmount),\n      integratorFees: request.integratorFees ? toBeHex(request.integratorFees) : undefined,\n    },\n    { arrayFormat: 'repeat' },\n  );\n  return fetch(`${options?.baseUrl ?? getBaseUrl()}/swap/v1/quotes?${queryParams}`, {\n    signal: options?.abortSignal,\n    headers: { ...(options?.avnuPublicKey !== undefined && { 'ask-signature': 'true' }) },\n  })\n    .then((response) => parseResponse<Quote[]>(response, options?.avnuPublicKey))\n    .then((quotes) =>\n      quotes.map((quote) => ({\n        ...quote,\n        sellAmount: BigInt(quote.sellAmount),\n        buyAmount: BigInt(quote.buyAmount),\n        buyAmountWithoutFees: BigInt(quote.buyAmountWithoutFees),\n        gasFees: BigInt(quote.gasFees),\n        avnuFees: BigInt(quote.avnuFees),\n        integratorFees: BigInt(quote.integratorFees),\n        avnuFeesBps: BigInt(quote.avnuFeesBps),\n        integratorFeesBps: BigInt(quote.integratorFeesBps),\n        suggestedSolution: quote.suggestedSolution\n          ? {\n              ...quote.suggestedSolution,\n              sellAmount: BigInt(quote.suggestedSolution.sellAmount),\n              buyAmount: BigInt(quote.suggestedSolution.buyAmount),\n            }\n          : undefined,\n      })),\n    );\n};\n\n/**\n * Executing the exchange through AVNU router\n *\n * @param quoteId: The id of the selected quote\n * @param takerSignature: Taker's signature.\n * @param nonce: Taker's address nonce. See `buildGetNonce`\n * @param takerAddress: Required when taker address was not provided during the quote request\n * @param slippage: The maximum acceptable slippage of the buyAmount amount. Default value is 5%. 0.05 is 5%.\n * This value is ignored if slippage is not applicable to the selected quote\n * @param options: Optional options.\n * @returns The transaction hash\n */\nconst fetchExecuteSwapTransaction = (\n  quoteId: string,\n  takerSignature: Signature,\n  nonce: string,\n  takerAddress?: string,\n  slippage?: number,\n  options?: AvnuOptions,\n): Promise<InvokeSwapResponse> => {\n  let signature: string[] = [];\n\n  if (Array.isArray(takerSignature)) {\n    signature = takerSignature.map((sig) => toBeHex(BigInt(sig)));\n  } else if (takerSignature.r && takerSignature.s) {\n    signature = [toBeHex(BigInt(takerSignature.r)), toBeHex(BigInt(takerSignature.s))];\n  }\n  return fetch(`${options?.baseUrl ?? getBaseUrl()}/swap/v1/execute`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      ...(options?.avnuPublicKey && { 'ask-signature': 'true' }),\n    },\n    body: JSON.stringify({\n      quoteId,\n      takerAddress,\n      nonce,\n      slippage,\n      takerSignature: signature,\n    }),\n  }).then((response) => parseResponse<InvokeSwapResponse>(response, options?.avnuPublicKey));\n};\n\n/**\n * Build data for executing the exchange through AVNU router\n * It allows trader to build the data needed for executing the exchange on AVNU router\n *\n * @param quoteId: The id of the selected quote\n * @param nonce: Taker's address nonce. See `buildGetNonce`. Warning: the nonce mechanism will change\n * @param takerAddress: Required when taker address was not provided during the quote request\n * @param slippage: The maximum acceptable slippage of the buyAmount amount. Default value is 5%. 0.05 is 5%.\n * This value is ignored if slippage is not applicable to the selected quote\n * @param options: Optional options.\n * @returns The calldata\n */\nconst fetchBuildExecuteTransaction = (\n  quoteId: string,\n  nonce?: string,\n  takerAddress?: string,\n  slippage?: number,\n  options?: AvnuOptions,\n): Promise<BuildSwapTransaction> =>\n  fetch(`${options?.baseUrl ?? getBaseUrl()}/swap/v1/build`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      ...(options?.avnuPublicKey && { 'ask-signature': 'true' }),\n    },\n    body: JSON.stringify({ quoteId, takerAddress, nonce, slippage }),\n  }).then((response) => parseResponse<BuildSwapTransaction>(response, options?.avnuPublicKey));\n\n/**\n * Fetches the supported tokens.\n *\n * @param request: The request params for the avnu API `/swap/v1/tokens` endpoint.\n * @param options: Optional options.\n * @returns The best quotes\n */\nconst fetchTokens = (request?: GetTokensRequest, options?: AvnuOptions): Promise<Page<Token>> =>\n  fetch(`${options?.baseUrl ?? getBaseUrl()}/swap/v1/tokens?${qs.stringify(request ?? {})}`, {\n    signal: options?.abortSignal,\n    headers: { ...(options?.avnuPublicKey && { 'ask-signature': 'true' }) },\n  }).then((response) => parseResponse<Page<Token>>(response, options?.avnuPublicKey));\n\n/**\n * Fetches the supported sources\n *\n * @param options: Optional options.\n * @returns The sources\n */\nconst fetchSources = (options?: AvnuOptions): Promise<Source[]> =>\n  fetch(`${options?.baseUrl ?? getBaseUrl()}/swap/v1/sources`, {\n    signal: options?.abortSignal,\n    headers: { ...(options?.avnuPublicKey && { 'ask-signature': 'true' }) },\n  }).then((response) => parseResponse<Source[]>(response, options?.avnuPublicKey));\n\n/**\n * Verifies if the address is whitelisted\n * Throws an error when the contractAddress is not whitelisted\n *\n * @param contractAddress: The address to check\n * @param chainId: The chainId\n */\nconst checkContractAddress = (contractAddress: string, chainId: string, dev?: boolean) => {\n  if (!(dev ? AVNU_ADDRESS[`${chainId}-dev`] : AVNU_ADDRESS[chainId])?.includes(contractAddress)) {\n    throw Error(`Contract ${contractAddress} is not whitelisted`);\n  }\n};\n\n/**\n * Build approve call\n *\n * @param sellTokenAddress: The sell token address\n * @param sellAmount: The sell amount\n * @param chainId: The chainId\n * @param dev: Specify if you need to use the dev environment  * @returns Call\n */\nconst buildApproveTx = (sellTokenAddress: string, sellAmount: bigint, chainId: string, dev?: boolean): Call => {\n  const value = uint256.bnToUint256(toBeHex(sellAmount));\n  return {\n    contractAddress: sellTokenAddress,\n    entrypoint: 'approve',\n    calldata: [dev ? AVNU_ADDRESS[`${chainId}-dev`] : AVNU_ADDRESS[chainId], value.low, value.high],\n  };\n};\n\n/**\n * Build getNonce call\n *\n * @param takerAddress: The taker's address\n * @param chainId: The chainId\n * @param dev: Specify if you need to use the dev environment\n * @returns Call\n */\nconst buildGetNonce = (takerAddress: string, chainId: string, dev?: boolean): Call => ({\n  contractAddress: dev ? AVNU_ADDRESS[`${chainId}-dev`] : AVNU_ADDRESS[chainId],\n  entrypoint: 'getNonce',\n  calldata: [BigInt(takerAddress).toString()],\n});\n\n/**\n * Sign the quote\n * The signature will be used in the AVNU contract\n *\n * @param account: The account of the trader\n * @param quote: The selected quote. See `getQuotes`\n * @param nonce: Taker's address nonce. See `buildGetNonce`\n * @param chainId: The chainId\n * @returns Call\n */\nconst signQuote = (account: AccountInterface, quote: Quote, nonce: string, chainId: string): Promise<Signature> =>\n  account.signMessage({\n    domain: { name: 'AVNUFinance', version: '1', chainId: chainId },\n    message: {\n      taker_address: account.address,\n      taker_token_address: quote.sellTokenAddress,\n      taker_token_amount: toBeHex(quote.sellAmount),\n      maker_address: quote.routes[0].address,\n      maker_token_address: quote.buyTokenAddress,\n      maker_token_amount: toBeHex(quote.buyAmount),\n      nonce,\n    },\n    primaryType: 'TakerMessage',\n    types: {\n      StarkNetDomain: [\n        { name: 'name', type: 'felt' },\n        { name: 'version', type: 'felt' },\n        { name: 'chainId', type: 'felt' },\n      ],\n      TakerMessage: [\n        { name: 'taker_address', type: 'felt' },\n        { name: 'taker_token_address', type: 'felt' },\n        { name: 'taker_token_amount', type: 'felt' },\n        { name: 'maker_address', type: 'felt' },\n        { name: 'maker_token_address', type: 'felt' },\n        { name: 'maker_token_amount', type: 'felt' },\n        { name: 'nonce', type: 'felt' },\n      ],\n    },\n  });\n\nconst hashQuote = (accountAddress: string, quote: Quote, nonce: string, chainId: string): string =>\n  typedData.getMessageHash(\n    {\n      domain: { name: 'AVNUFinance', version: '1', chainId: chainId },\n      message: {\n        taker_address: accountAddress,\n        taker_token_address: quote.sellTokenAddress,\n        taker_token_amount: toBeHex(quote.sellAmount),\n        maker_address: quote.routes[0].address,\n        maker_token_address: quote.buyTokenAddress,\n        maker_token_amount: toBeHex(quote.buyAmount),\n        nonce,\n      },\n      primaryType: 'TakerMessage',\n      types: {\n        StarkNetDomain: [\n          { name: 'name', type: 'felt' },\n          { name: 'version', type: 'felt' },\n          { name: 'chainId', type: 'felt' },\n        ],\n        TakerMessage: [\n          { name: 'taker_address', type: 'felt' },\n          { name: 'taker_token_address', type: 'felt' },\n          { name: 'taker_token_amount', type: 'felt' },\n          { name: 'maker_address', type: 'felt' },\n          { name: 'maker_token_address', type: 'felt' },\n          { name: 'maker_token_amount', type: 'felt' },\n          { name: 'nonce', type: 'felt' },\n        ],\n      },\n    },\n    accountAddress,\n  );\n\n/**\n * Execute the exchange\n *\n * @param account: The account of the trader\n * @param quote: The selected quote. See `getQuotes`\n * @param nonce: Taker's address nonce. See `buildGetNonce`\n * @param executeApprove: False if the taker already executed `approve`\n * @param gasless: False if the user wants to execute the transaction himself\n * @param takerSignature: Optional: the function will ask the user tu sign the quote if param is undefined\n * @param slippage: The maximum acceptable slippage of the buyAmount amount. Default value is 5%. 0.05 is 5%.\n * This value is ignored if slippage is not applicable to the selected quote\n * @param options: Optional options.\n * @returns Promise<InvokeSwapResponse>\n */\nconst executeSwap = async (\n  account: AccountInterface,\n  quote: Quote,\n  { executeApprove = true, gasless = false, takerSignature, slippage }: ExecuteSwapOptions = {},\n  options?: AvnuOptions,\n): Promise<InvokeSwapResponse> => {\n  const chainId = await account.getChainId();\n  if (chainId !== quote.chainId) {\n    throw Error(`Invalid chainId`);\n  }\n\n  const approve = executeApprove\n    ? buildApproveTx(quote.sellTokenAddress, quote.sellAmount, quote.chainId, options?.dev)\n    : undefined;\n\n  // /!\\ Do not implement this yourself. It will change /!\\\n  let nonce = undefined;\n  if (quote.liquiditySource === 'MARKET_MAKER' || gasless) {\n    const getNonce = buildGetNonce(account.address, chainId, options?.dev);\n    const response = await account.callContract(getNonce);\n    nonce = response.result[0];\n  }\n\n  if (gasless) {\n    if (approve) await account.execute([approve]);\n    takerSignature = takerSignature ?? (await signQuote(account, quote, nonce!, quote.chainId));\n    return fetchExecuteSwapTransaction(quote.quoteId, takerSignature, nonce!, account.address, slippage, options);\n  } else {\n    return fetchBuildExecuteTransaction(quote.quoteId, nonce, account.address, slippage, options)\n      .then((call) => {\n        checkContractAddress(call.contractAddress, call.chainId, options?.dev);\n        return account.execute(approve ? [approve, call] : [call]);\n      })\n      .then((value) => ({ transactionHash: value.transaction_hash }));\n  }\n};\n\n/**\n * Calculate the min amount received from amount and slippage\n *\n * @param amount: The amount to apply slippage\n * @param slippage: The slippage to apply in bps. 10 is 0.1%\n * @returns bigint\n */\nconst calculateMinAmount = (amount: bigint, slippage: number): bigint =>\n  amount - (amount * BigInt(slippage)) / BigInt(10000);\n\nexport {\n  buildApproveTx,\n  buildGetNonce,\n  calculateMinAmount,\n  checkContractAddress,\n  executeSwap,\n  fetchBuildExecuteTransaction,\n  fetchExecuteSwapTransaction,\n  fetchPrices,\n  fetchQuotes,\n  fetchSources,\n  fetchTokens,\n  hashQuote,\n  signQuote,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,sBAA0B;AAEnB,IAAM,mBAAmB;AACzB,IAAM,WAAW;AACjB,IAAM,eAA8C;AAAA,EACzD,CAAC,0BAAU,gBAAgB,OAAO,GAAG;AAAA,EACrC,CAAC,GAAG,0BAAU,gBAAgB,OAAO,MAAM,GAAG;AAAA,EAC9C,CAAC,0BAAU,gBAAgB,SAAS,GAAG;AAAA,EACvC,CAAC,GAAG,0BAAU,gBAAgB,SAAS,MAAM,GAAG;AAClD;;;ACTA,oBAA2B;AAC3B,IAAAA,mBAA0B;;;AC6InB,IAAK,aAAL,kBAAKC,gBAAL;AACL,EAAAA,YAAA,SAAM;AACN,EAAAA,YAAA,kBAAe;AACf,EAAAA,YAAA,YAAS;AAHC,SAAAA;AAAA,GAAA;;;AD9HL,IAAM,gBAAgB,OAAqB;AAAA,EAChD,kBAAkB;AAAA,EAClB,gBAAY,0BAAW,KAAK,EAAE;AAAA,EAC9B,iBAAiB;AACnB;AAEO,IAAM,gBAAgB,OAAqB;AAAA,EAChD,kBAAkB;AAAA,EAClB,gBAAY,0BAAW,KAAK,EAAE;AAAA,EAC9B,iBAAiB;AAAA,EACjB,MAAM;AAAA,EACN,cAAc;AAChB;AAEO,IAAM,SAAS,OAAc;AAAA,EAClC,kBAAkB;AAAA,EAClB,gBAAY,0BAAW,KAAK,EAAE;AAAA,EAC9B,iBAAiB;AAAA,EACjB,iBAAiB;AAAA,EACjB,eAAW,0BAAW,KAAK,EAAE;AAAA,EAC7B,gBAAgB;AAAA,EAChB,aAAa;AAAA,EACb,SAAS,2BAAU,gBAAgB;AAAA,EACnC,YAAY;AAAA,EACZ,eAAe;AAAA,EACf,SAAS,OAAO,CAAC;AAAA,EACjB,cAAc;AAChB;AAEO,IAAM,SAAS,OAAc;AAAA,EAClC,SAAS;AAAA,EACT,kBAAkB;AAAA,EAClB,gBAAY,0BAAW,KAAK,EAAE;AAAA,EAC9B,iBAAiB;AAAA,EACjB,iBAAiB;AAAA,EACjB,eAAW,0BAAW,KAAK,EAAE;AAAA,EAC7B,gBAAgB;AAAA,EAChB,0BAAsB,0BAAW,KAAK,EAAE;AAAA,EACxC,2BAA2B;AAAA,EAC3B,aAAa;AAAA,EACb,SAAS,2BAAU,gBAAgB;AAAA,EACnC,QAAQ;AAAA,EACR,QAAQ;AAAA,IACN;AAAA,MACE,MAAM;AAAA,MACN,SAAS;AAAA,MACT,SAAS;AAAA,MACT,kBAAkB;AAAA,MAClB,iBAAiB;AAAA,MACjB,QAAQ,CAAC;AAAA,IACX;AAAA,EACF;AAAA,EACA,SAAS,OAAO,KAAK;AAAA,EACrB,cAAc;AAAA,EACd,UAAU,OAAO,KAAK;AAAA,EACtB,eAAe;AAAA,EACf,aAAa,OAAO,KAAK;AAAA,EACzB,gBAAgB,OAAO,KAAK;AAAA,EAC5B,qBAAqB;AAAA,EACrB,mBAAmB,OAAO,KAAK;AAAA,EAC/B,eAAe;AAAA,EACf,iBAAiB;AAAA,EACjB,mBAAmB;AACrB;AAEO,IAAM,0BAA0B,OAAc;AAAA,EACnD,SAAS;AAAA,EACT,kBAAkB;AAAA,EAClB,gBAAY,0BAAW,KAAK,EAAE;AAAA,EAC9B,iBAAiB;AAAA,EACjB,iBAAiB;AAAA,EACjB,eAAW,0BAAW,KAAK,EAAE;AAAA,EAC7B,gBAAgB;AAAA,EAChB,0BAAsB,0BAAW,KAAK,EAAE;AAAA,EACxC,2BAA2B;AAAA,EAC3B,aAAa;AAAA,EACb,SAAS,2BAAU,gBAAgB;AAAA,EACnC,QAAQ;AAAA,EACR,eAAe;AAAA,EACf,iBAAiB;AAAA,EACjB,QAAQ;AAAA,IACN;AAAA,MACE,MAAM;AAAA,MACN,SAAS;AAAA,MACT,SAAS;AAAA,MACT,kBAAkB;AAAA,MAClB,iBAAiB;AAAA,MACjB,QAAQ;AAAA,QACN;AAAA,UACE,MAAM;AAAA,UACN,SAAS;AAAA,UACT,SAAS;AAAA,UACT,kBAAkB;AAAA,UAClB,iBAAiB;AAAA,UACjB,QAAQ;AAAA,YACN;AAAA,cACE,MAAM;AAAA,cACN,SAAS;AAAA,cACT,SAAS;AAAA,cACT,kBAAkB;AAAA,cAClB,iBAAiB;AAAA,cACjB,QAAQ,CAAC;AAAA,YACX;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,SAAS,OAAO,KAAK;AAAA,EACrB,cAAc;AAAA,EACd,UAAU,OAAO,KAAK;AAAA,EACtB,eAAe;AAAA,EACf,aAAa,OAAO,KAAK;AAAA,EACzB,gBAAgB,OAAO,KAAK;AAAA,EAC5B,qBAAqB;AAAA,EACrB,mBAAmB,OAAO,KAAK;AAAA,EAC/B,mBAAmB;AACrB;AAEO,IAAM,8BAA8B,OAAc;AAAA,EACvD,SAAS;AAAA,EACT,kBAAkB;AAAA,EAClB,gBAAY,0BAAW,KAAK,EAAE;AAAA,EAC9B,iBAAiB;AAAA,EACjB,iBAAiB;AAAA,EACjB,eAAW,0BAAW,KAAK,EAAE;AAAA,EAC7B,gBAAgB;AAAA,EAChB,0BAAsB,0BAAW,KAAK,EAAE;AAAA,EACxC,2BAA2B;AAAA,EAC3B,aAAa;AAAA,EACb,SAAS,2BAAU,gBAAgB;AAAA,EACnC,QAAQ;AAAA,EACR,SAAS,OAAO,KAAK;AAAA,EACrB,cAAc;AAAA,EACd,UAAU,OAAO,KAAK;AAAA,EACtB,eAAe;AAAA,EACf,aAAa,OAAO,KAAK;AAAA,EACzB,gBAAgB,OAAO,KAAK;AAAA,EAC5B,qBAAqB;AAAA,EACrB,mBAAmB,OAAO,KAAK;AAAA,EAC/B,eAAe;AAAA,EACf,iBAAiB;AAAA,EACjB,QAAQ;AAAA,IACN;AAAA,MACE,MAAM;AAAA,MACN,SAAS;AAAA,MACT,SAAS;AAAA,MACT,kBAAkB;AAAA,MAClB,iBAAiB;AAAA,MACjB,QAAQ;AAAA,QACN;AAAA,UACE,MAAM;AAAA,UACN,SAAS;AAAA,UACT,SAAS;AAAA,UACT,kBAAkB;AAAA,UAClB,iBAAiB;AAAA,UACjB,QAAQ;AAAA,YACN;AAAA,cACE,MAAM;AAAA,cACN,SAAS;AAAA,cACT,SAAS;AAAA,cACT,kBAAkB;AAAA,cAClB,iBAAiB;AAAA,cACjB,QAAQ,CAAC;AAAA,YACX;AAAA,UACF;AAAA,QACF;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,SAAS;AAAA,UACT,SAAS;AAAA,UACT,kBAAkB;AAAA,UAClB,iBAAiB;AAAA,UACjB,QAAQ,CAAC;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,SAAS;AAAA,MACT,SAAS;AAAA,MACT,kBAAkB;AAAA,MAClB,iBAAiB;AAAA,MACjB,QAAQ,CAAC;AAAA,IACX;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,SAAS;AAAA,MACT,SAAS;AAAA,MACT,kBAAkB;AAAA,MAClB,iBAAiB;AAAA,MACjB,QAAQ;AAAA,QACN;AAAA,UACE,MAAM;AAAA,UACN,SAAS;AAAA,UACT,SAAS;AAAA,UACT,kBAAkB;AAAA,UAClB,iBAAiB;AAAA,UACjB,QAAQ,CAAC;AAAA,QACX;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,SAAS;AAAA,UACT,SAAS;AAAA,UACT,kBAAkB;AAAA,UAClB,iBAAiB;AAAA,UACjB,QAAQ,CAAC;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,mBAAmB;AACrB;AAEO,IAAM,uBAAuB,OAA2B;AAAA,EAC7D,iBAAiB;AACnB;AAEO,IAAM,wBAAwB,OAA6B;AAAA,EAChE,SAAS,2BAAU,gBAAgB;AAAA,EACnC,iBAAiB;AAAA,EACjB,YAAY;AAAA,EACZ,UAAU,CAAC;AACb;AAEO,IAAM,WAAW,OAAc;AAAA,EACpC,MAAM;AAAA,EACN,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,SAAS;AAAA,EACT,SACE;AACJ;AAEO,IAAM,WAAW,OAAc;AAAA,EACpC,MAAM;AAAA,EACN,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,SAAS;AAAA,EACT,SACE;AACJ;AAEO,IAAM,QAAQ,OAAa;AAAA,EAChC,QAAQ,SAAS;AAAA,EACjB,QAAQ,SAAS;AACnB;AAEO,IAAM,QAAQ,CAAI,SAAc,OAAO,IAAI,SAAS,GAAG,aAAa,GAAG,gBAAgB,OAAgB;AAAA,EAC5G;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEO,IAAM,UAAU,OAAe;AAAA,EACpC,MAAM;AAAA,EACN,SAAS;AAAA,EACT,MAAM;AAAA,EACN;AACF;;;AEvRA,IAAAC,iBAAwB;AACxB,gBAAe;AACf,IAAAC,mBAAgF;AAkBhF,IAAM,aAAa,MAAe,QAAQ,IAAI,aAAa,QAAQ,mBAAmB;AAEtF,IAAM,gBAAgB,CAAI,UAAoB,kBAAuC;AACnF,MAAI,SAAS,WAAW,KAAK;AAC3B,WAAO,SAAS,KAAK,EAAE,KAAK,CAAC,UAAwB;AACnD,YAAM,IAAI,MAAM,MAAM,SAAS,CAAC,CAAC;AAAA,IACnC,CAAC;AAAA,EACH;AACA,MAAI,SAAS,SAAS,KAAK;AACzB,UAAM,IAAI,MAAM,GAAG,SAAS,MAAM,IAAI,SAAS,UAAU,EAAE;AAAA,EAC7D;AACA,MAAI,eAAe;AACjB,UAAM,YAAY,SAAS,QAAQ,IAAI,WAAW;AAClD,QAAI,CAAC;AAAW,YAAM,IAAI,MAAM,qBAAqB;AACrD,WAAO,SACJ,MAAM,EACN,KAAK,EACL,KAAK,CAAC,iBAAiB;AACtB,YAAM,eAAe,sBAAK,sBAAsB,CAAC,sBAAK,eAAe,YAAY,CAAC,CAAC;AACnF,YAAM,eAAe,UAAU,MAAM,GAAG,EAAE,IAAI,CAAC,MAAM,OAAO,CAAC,CAAC;AAC9D,YAAM,gBAAgB,IAAI,oBAAG,WAAW,UAAU,aAAa,CAAC,GAAG,aAAa,CAAC,CAAC;AAClF,UAAI,CAAC,oBAAG,WAAW,OAAO,eAAe,cAAc,aAAa;AAClE,cAAM,IAAI,MAAM,0BAA0B;AAAA,IAC9C,CAAC,EACA,KAAK,MAAM,SAAS,KAAK,CAAC;AAAA,EAC/B;AACA,SAAO,SAAS,KAAK;AACvB;AAUA,IAAM,cAAc,CAAC,SAAuB,YAA4C;AACtF,QAAM,cAAc,UAAAC,QAAG,UAAU,EAAE,GAAG,SAAS,gBAAY,wBAAQ,QAAQ,UAAU,EAAE,GAAG,EAAE,aAAa,SAAS,CAAC;AACnH,SAAO,MAAM,GAAG,SAAS,WAAW,WAAW,CAAC,mBAAmB,WAAW,IAAI;AAAA,IAChF,QAAQ,SAAS;AAAA,IACjB,SAAS,EAAE,GAAI,SAAS,kBAAkB,UAAa,EAAE,iBAAiB,OAAO,EAAG;AAAA,EACtF,CAAC,EACE,KAAK,CAAC,aAAa,cAAuB,UAAU,SAAS,aAAa,CAAC,EAC3E;AAAA,IAAK,CAAC,WACL,OAAO,IAAI,CAAC,WAAW;AAAA,MACrB,GAAG;AAAA,MACH,YAAY,OAAO,MAAM,UAAU;AAAA,MACnC,WAAW,OAAO,MAAM,SAAS;AAAA,MACjC,SAAS,OAAO,MAAM,OAAO;AAAA,IAC/B,EAAE;AAAA,EACJ;AACJ;AAUA,IAAM,cAAc,CAAC,SAAuB,YAA4C;AACtF,QAAM,cAAc,UAAAA,QAAG;AAAA,IACrB;AAAA,MACE,GAAG;AAAA,MACH,gBAAY,wBAAQ,QAAQ,UAAU;AAAA,MACtC,gBAAgB,QAAQ,qBAAiB,wBAAQ,QAAQ,cAAc,IAAI;AAAA,IAC7E;AAAA,IACA,EAAE,aAAa,SAAS;AAAA,EAC1B;AACA,SAAO,MAAM,GAAG,SAAS,WAAW,WAAW,CAAC,mBAAmB,WAAW,IAAI;AAAA,IAChF,QAAQ,SAAS;AAAA,IACjB,SAAS,EAAE,GAAI,SAAS,kBAAkB,UAAa,EAAE,iBAAiB,OAAO,EAAG;AAAA,EACtF,CAAC,EACE,KAAK,CAAC,aAAa,cAAuB,UAAU,SAAS,aAAa,CAAC,EAC3E;AAAA,IAAK,CAAC,WACL,OAAO,IAAI,CAAC,WAAW;AAAA,MACrB,GAAG;AAAA,MACH,YAAY,OAAO,MAAM,UAAU;AAAA,MACnC,WAAW,OAAO,MAAM,SAAS;AAAA,MACjC,sBAAsB,OAAO,MAAM,oBAAoB;AAAA,MACvD,SAAS,OAAO,MAAM,OAAO;AAAA,MAC7B,UAAU,OAAO,MAAM,QAAQ;AAAA,MAC/B,gBAAgB,OAAO,MAAM,cAAc;AAAA,MAC3C,aAAa,OAAO,MAAM,WAAW;AAAA,MACrC,mBAAmB,OAAO,MAAM,iBAAiB;AAAA,MACjD,mBAAmB,MAAM,oBACrB;AAAA,QACE,GAAG,MAAM;AAAA,QACT,YAAY,OAAO,MAAM,kBAAkB,UAAU;AAAA,QACrD,WAAW,OAAO,MAAM,kBAAkB,SAAS;AAAA,MACrD,IACA;AAAA,IACN,EAAE;AAAA,EACJ;AACJ;AAcA,IAAM,8BAA8B,CAClC,SACA,gBACA,OACA,cACA,UACA,YACgC;AAChC,MAAI,YAAsB,CAAC;AAE3B,MAAI,MAAM,QAAQ,cAAc,GAAG;AACjC,gBAAY,eAAe,IAAI,CAAC,YAAQ,wBAAQ,OAAO,GAAG,CAAC,CAAC;AAAA,EAC9D,WAAW,eAAe,KAAK,eAAe,GAAG;AAC/C,gBAAY,KAAC,wBAAQ,OAAO,eAAe,CAAC,CAAC,OAAG,wBAAQ,OAAO,eAAe,CAAC,CAAC,CAAC;AAAA,EACnF;AACA,SAAO,MAAM,GAAG,SAAS,WAAW,WAAW,CAAC,oBAAoB;AAAA,IAClE,QAAQ;AAAA,IACR,SAAS;AAAA,MACP,QAAQ;AAAA,MACR,gBAAgB;AAAA,MAChB,GAAI,SAAS,iBAAiB,EAAE,iBAAiB,OAAO;AAAA,IAC1D;AAAA,IACA,MAAM,KAAK,UAAU;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,gBAAgB;AAAA,IAClB,CAAC;AAAA,EACH,CAAC,EAAE,KAAK,CAAC,aAAa,cAAkC,UAAU,SAAS,aAAa,CAAC;AAC3F;AAcA,IAAM,+BAA+B,CACnC,SACA,OACA,cACA,UACA,YAEA,MAAM,GAAG,SAAS,WAAW,WAAW,CAAC,kBAAkB;AAAA,EACzD,QAAQ;AAAA,EACR,SAAS;AAAA,IACP,QAAQ;AAAA,IACR,gBAAgB;AAAA,IAChB,GAAI,SAAS,iBAAiB,EAAE,iBAAiB,OAAO;AAAA,EAC1D;AAAA,EACA,MAAM,KAAK,UAAU,EAAE,SAAS,cAAc,OAAO,SAAS,CAAC;AACjE,CAAC,EAAE,KAAK,CAAC,aAAa,cAAoC,UAAU,SAAS,aAAa,CAAC;AAS7F,IAAM,cAAc,CAAC,SAA4B,YAC/C,MAAM,GAAG,SAAS,WAAW,WAAW,CAAC,mBAAmB,UAAAA,QAAG,UAAU,WAAW,CAAC,CAAC,CAAC,IAAI;AAAA,EACzF,QAAQ,SAAS;AAAA,EACjB,SAAS,EAAE,GAAI,SAAS,iBAAiB,EAAE,iBAAiB,OAAO,EAAG;AACxE,CAAC,EAAE,KAAK,CAAC,aAAa,cAA2B,UAAU,SAAS,aAAa,CAAC;AAQpF,IAAM,eAAe,CAAC,YACpB,MAAM,GAAG,SAAS,WAAW,WAAW,CAAC,oBAAoB;AAAA,EAC3D,QAAQ,SAAS;AAAA,EACjB,SAAS,EAAE,GAAI,SAAS,iBAAiB,EAAE,iBAAiB,OAAO,EAAG;AACxE,CAAC,EAAE,KAAK,CAAC,aAAa,cAAwB,UAAU,SAAS,aAAa,CAAC;AASjF,IAAM,uBAAuB,CAAC,iBAAyB,SAAiB,QAAkB;AACxF,MAAI,EAAE,MAAM,aAAa,GAAG,OAAO,MAAM,IAAI,aAAa,OAAO,IAAI,SAAS,eAAe,GAAG;AAC9F,UAAM,MAAM,YAAY,eAAe,qBAAqB;AAAA,EAC9D;AACF;AAUA,IAAM,iBAAiB,CAAC,kBAA0B,YAAoB,SAAiB,QAAwB;AAC7G,QAAM,QAAQ,yBAAQ,gBAAY,wBAAQ,UAAU,CAAC;AACrD,SAAO;AAAA,IACL,iBAAiB;AAAA,IACjB,YAAY;AAAA,IACZ,UAAU,CAAC,MAAM,aAAa,GAAG,OAAO,MAAM,IAAI,aAAa,OAAO,GAAG,MAAM,KAAK,MAAM,IAAI;AAAA,EAChG;AACF;AAUA,IAAM,gBAAgB,CAAC,cAAsB,SAAiB,SAAyB;AAAA,EACrF,iBAAiB,MAAM,aAAa,GAAG,OAAO,MAAM,IAAI,aAAa,OAAO;AAAA,EAC5E,YAAY;AAAA,EACZ,UAAU,CAAC,OAAO,YAAY,EAAE,SAAS,CAAC;AAC5C;AAYA,IAAM,YAAY,CAAC,SAA2B,OAAc,OAAe,YACzE,QAAQ,YAAY;AAAA,EAClB,QAAQ,EAAE,MAAM,eAAe,SAAS,KAAK,QAAiB;AAAA,EAC9D,SAAS;AAAA,IACP,eAAe,QAAQ;AAAA,IACvB,qBAAqB,MAAM;AAAA,IAC3B,wBAAoB,wBAAQ,MAAM,UAAU;AAAA,IAC5C,eAAe,MAAM,OAAO,CAAC,EAAE;AAAA,IAC/B,qBAAqB,MAAM;AAAA,IAC3B,wBAAoB,wBAAQ,MAAM,SAAS;AAAA,IAC3C;AAAA,EACF;AAAA,EACA,aAAa;AAAA,EACb,OAAO;AAAA,IACL,gBAAgB;AAAA,MACd,EAAE,MAAM,QAAQ,MAAM,OAAO;AAAA,MAC7B,EAAE,MAAM,WAAW,MAAM,OAAO;AAAA,MAChC,EAAE,MAAM,WAAW,MAAM,OAAO;AAAA,IAClC;AAAA,IACA,cAAc;AAAA,MACZ,EAAE,MAAM,iBAAiB,MAAM,OAAO;AAAA,MACtC,EAAE,MAAM,uBAAuB,MAAM,OAAO;AAAA,MAC5C,EAAE,MAAM,sBAAsB,MAAM,OAAO;AAAA,MAC3C,EAAE,MAAM,iBAAiB,MAAM,OAAO;AAAA,MACtC,EAAE,MAAM,uBAAuB,MAAM,OAAO;AAAA,MAC5C,EAAE,MAAM,sBAAsB,MAAM,OAAO;AAAA,MAC3C,EAAE,MAAM,SAAS,MAAM,OAAO;AAAA,IAChC;AAAA,EACF;AACF,CAAC;AAEH,IAAM,YAAY,CAAC,gBAAwB,OAAc,OAAe,YACtE,2BAAU;AAAA,EACR;AAAA,IACE,QAAQ,EAAE,MAAM,eAAe,SAAS,KAAK,QAAiB;AAAA,IAC9D,SAAS;AAAA,MACP,eAAe;AAAA,MACf,qBAAqB,MAAM;AAAA,MAC3B,wBAAoB,wBAAQ,MAAM,UAAU;AAAA,MAC5C,eAAe,MAAM,OAAO,CAAC,EAAE;AAAA,MAC/B,qBAAqB,MAAM;AAAA,MAC3B,wBAAoB,wBAAQ,MAAM,SAAS;AAAA,MAC3C;AAAA,IACF;AAAA,IACA,aAAa;AAAA,IACb,OAAO;AAAA,MACL,gBAAgB;AAAA,QACd,EAAE,MAAM,QAAQ,MAAM,OAAO;AAAA,QAC7B,EAAE,MAAM,WAAW,MAAM,OAAO;AAAA,QAChC,EAAE,MAAM,WAAW,MAAM,OAAO;AAAA,MAClC;AAAA,MACA,cAAc;AAAA,QACZ,EAAE,MAAM,iBAAiB,MAAM,OAAO;AAAA,QACtC,EAAE,MAAM,uBAAuB,MAAM,OAAO;AAAA,QAC5C,EAAE,MAAM,sBAAsB,MAAM,OAAO;AAAA,QAC3C,EAAE,MAAM,iBAAiB,MAAM,OAAO;AAAA,QACtC,EAAE,MAAM,uBAAuB,MAAM,OAAO;AAAA,QAC5C,EAAE,MAAM,sBAAsB,MAAM,OAAO;AAAA,QAC3C,EAAE,MAAM,SAAS,MAAM,OAAO;AAAA,MAChC;AAAA,IACF;AAAA,EACF;AAAA,EACA;AACF;AAgBF,IAAM,cAAc,OAClB,SACA,OACA,EAAE,iBAAiB,MAAM,UAAU,OAAO,gBAAgB,SAAS,IAAwB,CAAC,GAC5F,YACgC;AAChC,QAAM,UAAU,MAAM,QAAQ,WAAW;AACzC,MAAI,YAAY,MAAM,SAAS;AAC7B,UAAM,MAAM,iBAAiB;AAAA,EAC/B;AAEA,QAAM,UAAU,iBACZ,eAAe,MAAM,kBAAkB,MAAM,YAAY,MAAM,SAAS,SAAS,GAAG,IACpF;AAGJ,MAAI,QAAQ;AACZ,MAAI,MAAM,oBAAoB,kBAAkB,SAAS;AACvD,UAAM,WAAW,cAAc,QAAQ,SAAS,SAAS,SAAS,GAAG;AACrE,UAAM,WAAW,MAAM,QAAQ,aAAa,QAAQ;AACpD,YAAQ,SAAS,OAAO,CAAC;AAAA,EAC3B;AAEA,MAAI,SAAS;AACX,QAAI;AAAS,YAAM,QAAQ,QAAQ,CAAC,OAAO,CAAC;AAC5C,qBAAiB,kBAAmB,MAAM,UAAU,SAAS,OAAO,OAAQ,MAAM,OAAO;AACzF,WAAO,4BAA4B,MAAM,SAAS,gBAAgB,OAAQ,QAAQ,SAAS,UAAU,OAAO;AAAA,EAC9G,OAAO;AACL,WAAO,6BAA6B,MAAM,SAAS,OAAO,QAAQ,SAAS,UAAU,OAAO,EACzF,KAAK,CAAC,SAAS;AACd,2BAAqB,KAAK,iBAAiB,KAAK,SAAS,SAAS,GAAG;AACrE,aAAO,QAAQ,QAAQ,UAAU,CAAC,SAAS,IAAI,IAAI,CAAC,IAAI,CAAC;AAAA,IAC3D,CAAC,EACA,KAAK,CAAC,WAAW,EAAE,iBAAiB,MAAM,iBAAiB,EAAE;AAAA,EAClE;AACF;AASA,IAAM,qBAAqB,CAAC,QAAgB,aAC1C,SAAU,SAAS,OAAO,QAAQ,IAAK,OAAO,GAAK;","names":["import_starknet","SourceType","import_ethers","import_starknet","qs"]}